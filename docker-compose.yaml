services:
  mongodb:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    command: [ "sh", "-c", "mongod --replSet rs0 --bind_ip_all --port 27017" ]
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo 'try { rs.status() } catch (e) { rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongodb:27017\"}]}) }' | mongosh --quiet --port 27017" ]
      interval: 1s
      timeout: 10s
      start_period: 0s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: my_vhost
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  connector:
    build:
      context: .
      dockerfile: ./mrcond/Dockerfile
    container_name: connector
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      MRCON_MONGO_URI: "mongodb://root:example@mongodb:27017/"
      MRCON_RABBITMQ_URI: "amqp://guest:guest@rabbitmq:5672/my_vhost"
      MRCON_LOG: "mrcon=trace,mrcon=trace,lapin=debug"

    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./target/debug/mrcond:/app/mrcond:ro
    ports:
      # - "8080:8080" # health check
      - "3000:3000" # your app port if needed

volumes:
  mongo_data:
  rabbitmq_data:
